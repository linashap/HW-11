'''Создать пять классов описывающие реальные объекты. Каждый класс
должен содержать минимум три приватных атрибута, конструктор, геттеры
и сеттеры для каждого атрибута, два метода.
'''
class Car:
    def __init__(self,brand,model,speed) -> None:
        self.__brand=brand
        self.__model=model
        self.__speed=speed
        #-------------
    @property
    def brand(self):
        return(print(f"brand: {self.__brand}"))
    @brand.setter
    def brand(self,brand):
        self.__brand=brand
        return(self.__brand)
    #----------------------------------------
    @property
    def model(self):
        return(print(f"model: {self.__model}"))
    @model.setter
    def model(self,model):
        self.__model=model
        return(self.__model)
    #-----------------------------------------------
    @property
    def speed(self):
        return(print(f"speed: {self.__speed}"))
    @speed.setter
    def speed(self,speed):
        self.__speed=speed
        return(self.__speed)
    #------------------------
    @property
    def speed_up (self):
        self.__speed+=10
        return(self.__speed)
    @property
    def info(self):
        return(print(f"info:  brand: {self.__brand} model: {self.__model} speed: {self.__speed}"))

class Nirvana:
    def __init__(self,song,album,wolume) -> None:
        self.__song=song
        self.__album=album
        self.__wolume=wolume
        #-------------
    @property
    def song(self):
        return(print(f"song: {self.__song}"))
    @song.setter
    def song(self,song):
        self.__song=song
        return(self.__song)
    #----------------------------------------
    @property
    def album(self):
        return(print(f"album: {self.__album}"))
    @album.setter
    def album(self,album):
        self.__album=album
        return(self.__album)
    #-----------------------------------------------
    @property
    def wolume(self):
        return(print(f"wolume: {self.__wolume}"))
    @wolume.setter
    def wolume(self,wolume):
        self.__wolume=wolume
        return(self.__wolume)
    #------------------------
    @property
    def wolume_up (self):
        self.__wolume+=10
        return(self.__wolume)
    @property
    def info(self):
        return(print(f"info:   song: {self.__song} album: {self.__album} wolume: {self.__wolume}"))

class Aerosmith:
    def __init__(self,song,album,wolume) -> None:
        self.__song=song
        self.__album=album
        self.__wolume=wolume
        #-------------
    @property
    def song(self):
        return(print(f"song: {self.__song}"))
    @song.setter
    def song(self,song):
        self.__song=song
        return(self.__song)
    #----------------------------------------
    @property
    def album(self):
        return(print(f"album: {self.__album}"))
    @album.setter
    def album(self,album):
        self.__album=album
        return(self.__album)
    #-----------------------------------------------
    @property
    def wolume(self):
        return(print(f"wolume: {self.__wolume}"))
    @wolume.setter
    def wolume(self,wolume):
        self.__wolume=wolume
        return(self.__wolume)
    #------------------------
    @property
    def wolume_up (self):
        self.__wolume+=10
        return(self.__wolume)
    @property
    def info(self):
        return(print(f"info:   song: {self.__song} album: {self.__album} wolume: {self.__wolume}"))


class Star:
    def __init__(self,name,constellation,distance) -> None:
        self.__name=name
        self.__constellation=constellation
        self.__distance=distance
        #-------------
    @property
    def name(self):
        return(print(f"name: {self.__name}"))
    @name.setter
    def name(self,name):
        self.__name=name
        return(self.__name)
    #----------------------------------------
    @property
    def constellation(self):
        return(print(f"constellation: {self.__constellation}"))
    @constellation.setter
    def constellation(self,constellation):
        self.__constellation=constellation
        return(self.__constellation)
    #-----------------------------------------------
    @property
    def distance(self):
        return(print(f"distance: {self.__distance}"))
    @distance.setter
    def distance(self,distance):
        self.__distance=distance
        return(self.__distance)
    #------------------------
    @property
    def chek(self):
        if self.__distance<1000:
            print("малоудаленная звезда")
        else:
            print("сильноудаленная звезда")
    @property
    def info(self):
        return(print(f"info:  name: {self.__name} constellation: {self.__constellation} distance: {self.__distance}"))
    
class Plane:
    def __init__(self,brand,model,speed) -> None:
        self.__brand=brand
        self.__model=model
        self.__speed=speed
        #-------------
    @property
    def brand(self):
        return(print(f"brand: {self.__brand}"))
    @brand.setter
    def brand(self,brand):
        self.__brand=brand
        return(self.__brand)
    #----------------------------------------
    @property
    def model(self):
        return(print(f"model: {self.__model}"))
    @model.setter
    def model(self,model):
        self.__model=model
        return(self.__model)
    #-----------------------------------------------
    @property
    def speed(self):
        return(print(f"speed: {self.__speed}"))
    @speed.setter
    def speed(self,speed):
        self.__speed=speed
        return(self.__speed)
    #------------------------
    @property
    def speed_up (self):
        self.__speed+=500
        return(self.__speed)
    @property
    def info(self):
        return(print(f"info:  brand: {self.__brand} model: {self.__model} speed: {self.__speed}"))

def main():
    car=Car("bmw","q7",40)
    car.info
    car.speed
    car.speed=90
    car.speed
    car.brand
    car.brand="audi"
    car.brand
    car.speed
    car.speed_up
    car.speed
    #--------------------
    band=Nirvana('Heart-Shape box',"Nirvana",0)
    band.info
    band.wolume
    band.wolume=90
    band.wolume
    band.song
    band.song="Lake of fire"
    band.song
    band.wolume
    band.wolume_up
    band.wolume
    #-------------------------------
    band=Aerosmith('Dream on',"Live in PH",1000)
    band.info
    band.wolume
    band.wolume=20
    band.wolume
    band.song
    band.song="Cry"
    band.song
    band.wolume
    band.wolume_up
    band.wolume
    #--------------------------------
    f1=Star("Kaf","Cassiopea",500)
    f1.info
    f1.name
    f1.constellation
    f1.constellation="Sirius"
    f1.constellation
    f1.distance
    f1.chek
    #--------------------------
    plane=Plane("boing","7",1000)
    plane.info
    plane.speed
    plane.speed=1200
    plane.speed
    plane.brand
    plane.brand="ATP"
    plane.brand
    plane.speed
    plane.speed_up
    plane.speed

if __name__=="__main__":
    main()